<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/01/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/01/06/Hexo+GitHub%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p><em><strong>一、前置知识</strong></em></p>
<p>命令行的操作：后面的命令都是在命令行(cmd)或者类似命令行(Git Bash)的界面运行</p>
<p>Markdown文件（后缀是md的文件）的编写：推荐使用<strong>Typora</strong>(<a href="https://gitee.com/starlike_daydream/installer/raw/master/typora-setup-x64.exe">破解版链接</a>)，不需要记忆语法格式了</p>
<p>浏览器展示的页面文件–html文件：我们md文档将会生成html文件用于在浏览器展示。</p>
<p><em><strong>二、下载生成个人博客所需要的软件&#x2F;环境</strong></em></p>
<p>1.Git：（第三部分会用到）</p>
<p>简介：分布式版本控制系统，用于上传代码&#x2F;文件（这里会用到）和记录代码&#x2F;文件的历史版本，合并文件改动，团队项目必备工具（详见<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程 - 廖雪峰的官方网站</a>）。</p>
<p>官网安装：<a href="https://git-scm.com/download">Git - Downloads (git-scm.com)</a>，找到download下载（应该在左上角），若要选择版本，选择上面的64位版本（与电脑系统对应的版本）</p>
<p>官网下载慢的话可以用<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">镜像</a>(<strong>降序排列最新版在在最下面</strong>)</p>
<p>检测是否安装成功：git –version，出现对应版本号即代表安装成功</p>
<p>后面的命令可以在Git Bash执行（在任意文件目录右击空白处选择Open Git Bash Here，没有的话就选择更多选项（win11）），也可以win+R打开运行输入cmd，在命令行运行。</p>
<p>如果遇到执行不成功的情况，可以尝试用管理员身份运行Git Bash&#x2F;cmd</p>
<p>2.node.js：<a href="https://nodejs.cn/">Node.js 中文网 (nodejs.cn)</a>安装，进去后点击下载安装，选择长期支持版即可</p>
<p>简介：Node.js 是基于 <a href="https://v8.dev/">V8 JavaScript 引擎</a> 构建的 JavaScript 运行时，可以用它搭建本地服务器，这里我们需要用到它的npm命令</p>
<p>检测是否安装成功：命令行运行node -v和npm -v（注意中间要有空格），出现对应版本号即代表安装成功</p>
<p>安装好node.js之后就可以用npm命令下载安装hexo了</p>
<p>3.Hexo的安装与配置：</p>
<p>简介：一个基于node.js的帮我们写好的博客框架，用了它，我们只需要修改部分内容，就能获得只属于自己的个人博客，并编写文章上传了</p>
<p>(1)创建一个文件夹<strong>MyBlog</strong>，以后在这个文件夹操作，存放项目文件以及博客文章</p>
<p>(2)运行命令：<code>npm install hexo-cli -g</code>：安装hexo</p>
<p>(3)运行命令：<code>hexo init blog</code></p>
<p>(4)运行命令：<code>cd blog</code></p>
<p>(5)运行命令：<code>npm install</code></p>
<p>(6)运行命令：<code>hexo server</code>：启动本地服务器，按Ctrl键左键点击链接即可用默认浏览器访问，用按<strong>Ctrl+C</strong>停止运行</p>
<p><em><strong>三、使用GitHub提供的免费服务器</strong></em></p>
<p>GitHub简介：一个项目开放源代码的国外的代码托管平台，我们将用这里的GitHub仓库的Pages功能使用GitHub为我们提供的个人服务器</p>
<p>1.注册github账号（<a href="https://github.com/%EF%BC%89%EF%BC%8C%E5%B9%B6%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%EF%BC%88%E9%BB%98%E8%AE%A4%E9%80%89%E9%A1%B9%E5%88%9B%E5%BB%BA%E5%B0%B1%E8%A1%8C%EF%BC%89--%3E%E4%BB%93%E5%BA%93%E5%90%8D%E6%A0%BC%E5%BC%8F%E8%A6%81%E6%B1%82%EF%BC%9A%E4%BD%A0%E7%9A%84GitHub%E7%94%A8%E6%88%B7%E5%90%8D.[github.io](http://github.io/)">https://github.com/），并创建一个仓库（默认选项创建就行）--&gt;仓库名格式要求：你的GitHub用户名.[github.io](http://github.io/)</a></p>
<p>2.初始化Git的用户名和邮箱（加–global是为所有git项目设置，不加则是在当前目录的git项目设置）</p>
<p>注意：这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p>
<p>(1)初始化用户名–运行命令：<code>git config --global [user.name](http://user.name/)  &quot;yourname&quot;</code>（注意<a href="http://user.name/email">user.name&#x2F;email</a>和英文双引号”之间要有一个空格）</p>
<p>(2)初始化邮箱–运行命令：<code>git config --global user.email  &quot;youremail&quot;</code></p>
<p>(3)确认设置用户名和邮箱成功：执行以下命令</p>
<p>用户名：<code>git config --global [user.name](http://user.name/)</code> </p>
<p>邮箱：<code>git config --global user.email</code></p>
<p>3.ssh连接：只有连接成才能上传代码</p>
<p>(1)下载github部署插件：运行命令：<code>npm install hexo-deployer-git --save</code></p>
<p>本地生成获取ssh密钥</p>
<p>(2)生成密钥：运行命令：<code>ssh-keygen -t rsa -C &quot;youremail&quot;</code>（这里改为自己的邮箱），可能要一路回车</p>
<p>(3)获取密钥：在Git Bash运行命令<code>cat ~/.ssh/id_rsa.pub</code>，然后复制这行命令运行的结果</p>
<p>github创建ssh密钥</p>
<p>(4)打开<a href="http://github.com/">github</a>，在右上角的头像下面点击<strong>settings</strong>，再点击<strong>SSH and GPG keys</strong>，新建一个SSH，名字随便取一个都可以，把你的<strong>id_rsa.pub</strong>里面的信息复制进去，点击<strong>create&#x2F;创建</strong>即可完成创建</p>
<p>(5)验证ssh连接是否成功：<code>ssh -T git@github.com</code>，出现用户名(Hi!用户名.XXXXXXX)，即代表链接成功</p>
<p>4.生产的博客项目根目录下的**_config.yml**(可用vscode打开,也可用记事本打开)，划到最底部,deploy下的repository 要配置成自己的仓库地址<br><strong>(这是我的不要用!用你自己的!举个例子而已!)</strong></p>
<p><img src="/public/images/first-1.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line"></span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"></span><br><span class="line"> repo: git@github.com:witheasyl/witheasyl.github.io.git</span><br><span class="line"></span><br><span class="line"> branch: main</span><br></pre></td></tr></table></figure>

<p>（记得文件要保存，如果编辑器窗口顶部的文件名前面有个星号*，那就说明话没有保存）</p>
<p>5.使用hexo的常用命令来生成网页：</p>
<p>(1)清除之前生成的项目–<code>hexo clean（</code>可以清除之前项目的一些问题）</p>
<p>(2)在本地生成项目–<code>hexo g</code></p>
<p>(3)把项目部署到GitHub上–<code>hexo d</code></p>
<p>(4)上传一个帖子&#x2F;笔记：<code>hexo new post &quot;文件名&quot;</code>（这个文件就是md文档，内容将在这里编写）（位于生成的博客目录-&gt;source-&gt;_post）</p>
<p>(5)生成网页的连接的位置：</p>
<p>你创建的仓库<strong>repository</strong>–&gt;上方菜单栏<strong>Settings</strong>–&gt;左方菜单栏<strong>Pages</strong>–&gt;Source选择：Deploy from a branch–&gt;Branch选择：main，folder选择root–&gt;点击save过一会刷新应该就会生成</p>
<p>(6)一般的使用步骤：编写md文档，<code>hexo g</code><strong>(生成网页内容)</strong>+<code>hexo d</code>**(部署到Github)**，等到GitHub的项目右上角的小圆点标识变绿（再顶部的菜单Action点击一个上传操作即可查看详细过程）即可刷新博客网页，查看生成并部署好的在线网页</p>
<p>(7)配置个人信息：在文件根目录下的**_config.yml**，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration">配置描述</a>。</p>
]]></content>
  </entry>
</search>
